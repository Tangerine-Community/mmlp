// Generated by CoffeeScript 1.7.1
var Lesson, LessonMenuView, LessonView, MmlpRouter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Lesson = (function(_super) {
  __extends(Lesson, _super);

  function Lesson() {
    this.fetch = __bind(this.fetch, this);
    return Lesson.__super__.constructor.apply(this, arguments);
  }

  Lesson.prototype.url = 'lesson';

  Lesson.prototype.fetch = function() {
    var callback, error, splat;
    splat = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subject = splat[0];
    this.grade = splat[1];
    this.week = splat[2];
    this.day = splat[3];
    callback = splat[4];
    error = splat[5];
    return Mmlp.$db.view("mmlp/lesson", {
      include_docs: true,
      key: [this.subject, this.grade, this.week, this.day],
      success: (function(_this) {
        return function(response) {
          var attributes;
          if (response.rows.length === 0) {
            return typeof error === "function" ? error() : void 0;
          }
          attributes = _(response.rows).first().doc;
          _this.set(attributes);
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this),
      error: (function(_this) {
        return function() {
          return typeof error === "function" ? error() : void 0;
        };
      })(this)
    });
  };

  return Lesson;

})(Backbone.Model);

LessonView = (function(_super) {
  __extends(LessonView, _super);

  function LessonView() {
    this.render = __bind(this.render, this);
    return LessonView.__super__.constructor.apply(this, arguments);
  }

  LessonView.prototype.className = "LessonView";

  LessonView.prototype.initialize = function() {
    return this.lesson = new Lesson;
  };

  LessonView.prototype.render = function() {
    var $lesson, $specialSpans, day, element, grade, imageHtml, imageUrls, lessonText, oneFrom, replaces, subject, url, week, _i, _j, _len, _len1, _ref;
    if (this.lesson.get("grade") == null) {
      return;
    }
    if (!this.lesson.has("subject")) {
      return this.$el.html("<div class='lesson-language'>" + this.lesson.subject + "</div> <div class='lesson-info'> class " + this.lesson.grade + "<br> week " + this.lesson.week + " day " + this.lesson.day + " </div> <p>No lesson plan available.</p>");
    }
    subject = Mmlp["enum"].subjects[this.lesson.get("subject")];
    grade = this.lesson.get("grade");
    day = this.lesson.get("day");
    week = this.lesson.get("week");
    lessonText = this.lesson.get("lessonText");
    replaces = [
      {
        from: [/font\-size(.+?);/g],
        to: ''
      }, {
        from: [/src="lessons/g],
        to: "src=\"%2Fmmlp%2F_design%2Flessons"
      }, {
        from: [/src='lessons/g],
        to: "src=\'%2Fmmlp%2F_design%2Flessons"
      }, {
        from: [/%2F/g],
        to: "/"
      }, {
        from: ["▄"],
        to: '<img src="/mmlp/_design/mmlp/img/rectangle.png">'
      }, {
        from: ["▲"],
        to: '<img src="/mmlp/_design/mmlp/img/triangle.png">'
      }, {
        from: ["⬬"],
        to: '<img src="/mmlp/_design/mmlp/img/ellipse.png">'
      }
    ];
    for (_i = 0, _len = replaces.length; _i < _len; _i++) {
      element = replaces[_i];
      _ref = element.from;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        oneFrom = _ref[_j];
        lessonText = lessonText.replace(oneFrom, element.to);
      }
    }
    $lesson = $(lessonText);
    $lesson.find("audio").each(function(i, a) {
      var $a;
      $a = $(a);
      $a.attr("controls", false);
      $a.after("<button onClick='$(this).prev().prev()[0].pause();'>Pause</button>");
      return $a.after("<button onClick='$(this).prev()[0].play();'>Play</button>");
    });
    $specialSpans = $lesson.find("span[style]").filter(function(i, a) {
      var style;
      style = $(a).attr('style');
      return ~style.indexOf("Webdings") || ~style.indexOf("Wingdings");
    });
    $specialSpans.each(function(i, a) {
      var $a, char;
      $a = $(a);
      char = $.trim($a.html()).replace('&nbsp;', '');
      if (char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/home.png">');
      } else if (char === "?") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/hand.png">');
      } else if (char === "&acute;" || char === "´" || char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/question.png">');
      } else if (char === "" || char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/speak.png">');
      } else if (char === '&amp;' || char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/book.png">');
      } else if (char === "" || char === "p" || char === "" || char === "▲") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/triangle.png">');
      } else if (char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/star.png">');
      } else if (char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/circle.png">');
      } else if (char === "" || char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/square.png">');
      } else if (char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/diamond.png">');
      } else if (char === "" || char === "$") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/glasses.png">');
      } else if (char === "C") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/thumbs-up.png">');
      } else if (char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/listen.png">');
      } else if (char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/music.png">');
      } else if (char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/lips.png">');
      } else if (char === "" || char === "") {
        return $a.replaceWith('<img src="/mmlp/_design/mmlp/img/hollow.png">');
      }
    });
    imageUrls = this.lesson.get("image");
    imageHtml = ((function() {
      var _k, _len2, _results;
      _results = [];
      for (_k = 0, _len2 = imageUrls.length; _k < _len2; _k++) {
        url = imageUrls[_k];
        _results.push("<img src='/mmlp/_design/" + (decodeURIComponent(url)) + "'>");
      }
      return _results;
    })()).join('');
    this.$el.html("<div class='clearfix'> <div class='lesson-language'>" + subject + "</div> <div class='lesson-info'> class " + grade + "<br> week " + week + " day " + day + " </div> </div> <div class='image-container'>" + imageHtml + "</div> <div class='lesson-text'></div>");
    return this.$el.find(".lesson-text").append($lesson);
  };

  LessonView.prototype.select = function(subjectName, grade, week, day) {
    var menu, subject;
    subject = Mmlp["enum"].iSubjects[subjectName];
    menu = Mmlp.MenuView;
    menu.updateSubject();
    menu.$subject.val(subjectName);
    menu.onSubjectChange();
    menu.$grade.val(grade);
    menu.onGradeChange();
    menu.$week.val(week);
    menu.onWeekChange();
    menu.$day.val(day);
    return this.lesson.fetch(subject, grade, week, day, (function(_this) {
      return function() {
        return _this.render();
      };
    })(this));
  };

  return LessonView;

})(Backbone.View);

LessonMenuView = (function(_super) {
  __extends(LessonMenuView, _super);

  function LessonMenuView() {
    this.updateSubject = __bind(this.updateSubject, this);
    return LessonMenuView.__super__.constructor.apply(this, arguments);
  }

  LessonMenuView.prototype.className = "LessonMenuView";

  LessonMenuView.prototype.events = {
    "change #subject": "onSubjectChange",
    "change #grade": "onGradeChange",
    "change #week": "onWeekChange",
    "change #day": "onDayChange"
  };

  LessonMenuView.prototype.update = function() {};

  LessonMenuView.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    this.available = options.available;
    return this.render();
  };

  LessonMenuView.prototype.render = function() {
    this.$el.html("<label for='subject'>Subject</label> <select id='subject'><option disabled='disable' selected='true'>Select</option></select> <label for='grade'>Class</label> <select id='grade' disabled><option disabled='disable' selected='true'>Select</option></select> <label for='week'>Week</label> <select id='week' disabled><option disabled='disable' selected='true'>Select</option></select> <label for='day'>Day</label> <select id='day' disabled><option disabled='disable' selected='true'>Select</option></select>");
    this.$subject = this.$el.find("#subject");
    this.$grade = this.$el.find("#grade");
    this.$week = this.$el.find("#week");
    this.$day = this.$el.find("#day");
    return this.updateSubject();
  };

  LessonMenuView.prototype.updateSubject = function() {
    var alreadyDone, element, html, subject, _i, _len, _ref;
    html = "";
    alreadyDone = [];
    _ref = this.available;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      subject = element[0];
      if (!~alreadyDone.indexOf(subject)) {
        alreadyDone.push(subject);
        html += "<option value='" + subject + "'>" + subject + "</option>";
      }
    }
    html = "<option disabled='disabled' selected='true'>Select</option>" + html;
    return this.$subject.html(html);
  };

  LessonMenuView.prototype.onSubjectChange = function(selectedSubject) {
    var alreadyDone, element, grade, html, rows, _i, _len, _ref;
    selectedSubject = this.$subject.val();
    alreadyDone = [];
    rows = [];
    _ref = this.available;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      grade = element[1];
      if (element[0] === selectedSubject && !~alreadyDone.indexOf(grade)) {
        alreadyDone.push(grade);
        rows.push({
          order: grade,
          html: "<option value='" + grade + "'>" + grade + "</option>"
        });
      }
    }
    html = rows.sort(function(a, b) {
      return a.order - b.order;
    }).map(function(e) {
      return e.html;
    }).join('');
    html = "<option disabled='disabled' selected='true'>Select</option>" + html;
    this.$grade.removeAttr("disabled");
    return this.$grade.html(html);
  };

  LessonMenuView.prototype.onGradeChange = function() {
    var alreadyDone, element, html, rows, selectedGrade, selectedSubject, week, _i, _len, _ref;
    selectedSubject = this.$subject.val();
    selectedGrade = this.$grade.val();
    alreadyDone = [];
    rows = [];
    _ref = this.available;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      week = element[2];
      if (element[0] === selectedSubject && element[1] === selectedGrade && !~alreadyDone.indexOf(week)) {
        alreadyDone.push(week);
        rows.push({
          order: week,
          html: "<option value='" + week + "'>" + week + "</option>"
        });
      }
    }
    html = rows.sort(function(a, b) {
      return a.order - b.order;
    }).map(function(e) {
      return e.html;
    }).join('');
    html = "<option disabled='disabled' selected='true'>Select</option>" + html;
    this.$week.removeAttr("disabled");
    return this.$week.html(html);
  };

  LessonMenuView.prototype.onWeekChange = function() {
    var alreadyDone, day, element, html, rows, selectedGrade, selectedSubject, selectedWeek, _i, _len, _ref;
    selectedSubject = this.$subject.val();
    selectedGrade = this.$grade.val();
    selectedWeek = this.$week.val();
    rows = [];
    alreadyDone = [];
    _ref = this.available;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      day = element[3];
      if (element[0] === selectedSubject && element[1] === selectedGrade && element[2] === selectedWeek && !~alreadyDone.indexOf(day)) {
        rows.push({
          order: day,
          html: "<option value='" + day + "'>" + day + "</option>"
        });
      }
    }
    html = rows.sort(function(a, b) {
      return a.order - b.order;
    }).map(function(e) {
      return e.html;
    }).join('');
    html = "<option disabled='disabled' selected='true'>Select</option>" + html;
    this.$day.removeAttr("disabled");
    return this.$day.html(html);
  };

  LessonMenuView.prototype.onDayChange = function() {
    var day, grade, subject, week;
    subject = this.$subject.val();
    grade = this.$grade.val();
    week = this.$week.val();
    day = this.$day.val();
    Mmlp.router.navigate("lesson/" + subject + "/" + grade + "/" + week + "/" + day, false);
    return window.location.reload();
  };

  return LessonMenuView;

})(Backbone.View);

MmlpRouter = (function(_super) {
  __extends(MmlpRouter, _super);

  function MmlpRouter() {
    return MmlpRouter.__super__.constructor.apply(this, arguments);
  }

  MmlpRouter.prototype.routes = {
    'lesson/:subject/:grade/:week/:day': 'lesson'
  };

  MmlpRouter.prototype.lesson = function() {
    var day, grade, options, subject, week;
    options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    subject = options[0];
    grade = options[1];
    week = options[2];
    day = options[3];
    return Mmlp.LessonView.select(subject, grade, week, day);
  };

  return MmlpRouter;

})(Backbone.Router);
